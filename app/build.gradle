apply plugin: 'com.android.application'
apply plugin: 'android-apt'

android {
    signingConfigs {

        TamilMeme {
            keyAlias 'tamilmeme'
            keyPassword 'tamilmeme'
            storeFile file('../signed_keystore.jks')
            storePassword 'tamilmeme'


        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    def VERSION_CODE = 3
    def VERSION_NAME = "1.2"
    def APP_NAME = 'Tamil Meme'
    def APP_PACKAGE = "com.app.memecreator.tamil_new"
    def APP_ICON ="@mipmap/ic_launcher"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 25

        buildConfigField "boolean", "IS_TEST_BUILD", "false"
        buildConfigField "boolean", "IS_GPLAY_BUILD", "false"



    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.TamilMeme
        }
    }

    productFlavors {
        flavorDefault {
            applicationId APP_PACKAGE
            resValue 'string', 'app_name', APP_NAME
            manifestPlaceholders = [appIcon: APP_ICON]
            versionCode VERSION_CODE ; versionName VERSION_NAME
        }

        flavorTest {
            applicationId APP_PACKAGE + ".test"
            resValue 'string', 'app_name', '"MemeTestic"'
            manifestPlaceholders = [appIcon: APP_ICON + "_test"]
            versionCode = Integer.parseInt(new Date().format('yyMMdd'))
            versionName = new Date().format('yyMMdd')
            buildConfigField "boolean", "IS_TEST_BUILD", "true"
        }

        flavorGplay {
            applicationId APP_PACKAGE
            resValue 'string', 'app_name', APP_NAME
            manifestPlaceholders = [appIcon: APP_ICON]
            versionCode VERSION_CODE ; versionName VERSION_NAME
            buildConfigField "boolean", "IS_GPLAY_BUILD", "true"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    sourceSets { main { assets.srcDirs = ['src/main/assets', '../Assets'] } }
}

repositories {
    maven { url "https://jitpack.io" }

}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    // Default android libs
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.android.support:cardview-v7:25.2.0'
    compile "com.android.support:recyclerview-v7:25.2.0"
    compile 'com.google.firebase:firebase-ads:10.0.0'
    compile 'com.google.firebase:firebase-messaging:10.0.0'
    compile "com.squareup.picasso:picasso:2.4.0"
    compile 'com.github.deano2390:MaterialShowcaseView:1.1.0@aar'
    compile 'com.google.android.gms:play-services-analytics:10.0.0'

    // MemeTastic libs
    compile 'com.flipboard:bottomsheet-core:1.5.0'
    compile 'com.github.DASAR:ShiftColorPicker:v0.5'

    // Butterknife
    compile 'com.jakewharton:butterknife:8.0.1'
    apt 'com.jakewharton:butterknife-compiler:8.0.1'

}
apply plugin: 'com.google.gms.google-services'

final String RAW_DIR = "app/src/main/res/raw"
final String[] ROOT_TO_RAW_COPYFILES = ["README.md", "LICENSE.md", "CHANGELOG.md", "CONTRIBUTORS.txt"]

// Called before building
task copyRepoFiles(type: Copy) {

    // Copy files over to raw dir
    from rootProject.files(ROOT_TO_RAW_COPYFILES)
    into RAW_DIR.replaceFirst("app/", "")
    rename { String fileName ->
        fileName.replace(fileName, fileName.toLowerCase())
    }

    // Filter Contributors file
    from(rootProject.file("CONTRIBUTORS.txt")) {
        into '.'    // Target already changed to 'src/main/res/raw'
        rename { String fileName ->
            fileName.replace(fileName, fileName.toLowerCase())
        }
        filter { line ->
            (line.toString().matches("..l>>.*") || line.toString().startsWith("## 99l CONTRIBUTORS")) ? null : line.toString().trim().replaceAll(" \\(.*\\)", "")
        }
    }
}
tasks.copyRepoFiles.execute()



